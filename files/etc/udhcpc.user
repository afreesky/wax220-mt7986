#!/bin/sh

[ -z "$1" ] && echo "Udhcpc.user Error: should be run by udhcpc" && exit 1

ip_first_three_byte()
{
    ipaddr=$1
    
    ip_byte_1=$(echo $ipaddr | awk -F'.' '{print $1}')
    ip_byte_2=$(echo $ipaddr | awk -F'.' '{print $2}')
    ip_byte_3=$(echo $ipaddr | awk -F'.' '{print $3}')
    
    echo "$ip_byte_1.$ip_byte_2.$ip_byte_3"
}

case "$1" in
    deconfig)
        #switch batman-adv client->server
        redis-cli -s /tmp/.redis.sock DEL wan_dhcp > /dev/null
    ;;
    renew|bound)
        #wan ip change
        redis-cli -s /tmp/.redis.sock HSET wan_dhcp dhcpstate "$1" > /dev/null
        redis-cli -s /tmp/.redis.sock HSET wan_dhcp ipaddr "$ip" > /dev/null
        redis-cli -s /tmp/.redis.sock HSET wan_dhcp subnet "${subnet:-255.255.255.0}" > /dev/null
        redis-cli -s /tmp/.redis.sock HSET wan_dhcp mask "$mask" > /dev/null
        redis-cli -s /tmp/.redis.sock HSET wan_dhcp lease "$lease" > /dev/null
        redis-cli -s /tmp/.redis.sock HSET wan_dhcp serverid "$serverid" > /dev/null
        redis-cli -s /tmp/.redis.sock HSET wan_dhcp uptime "$(cat /proc/uptime | cut -d" " -f1 | cut -d"." -f1)" > /dev/null
        for k in $router; do
            redis-cli -s /tmp/.redis.sock HSET wan_dhcp gateway "$k" > /dev/null
        done
        i=1;
        for k in $dns; do
            redis-cli -s /tmp/.redis.sock HSET wan_dhcp dns_$i "$k" > /dev/null
            i=$(($i+1))
        done
        cur_lan_ip="$(uci get network.lan.ipaddr)"
        net_mode="$(uci get system.@system[0].netmode 2> /dev/null)"
        net_mode="${net_mode:-"router"}"
        find_conflict="false"
        if [ "$net_mode" = "router" ];then
            for k in $dns; do
                if [ $(ip_first_three_byte $cur_lan_ip) = $(ip_first_three_byte $k) ];then
                    find_conflict="true"
                    break;
                fi
            done

            if [ $(ip_first_three_byte $cur_lan_ip) = $(ip_first_three_byte $ip) ];then
                find_conflict="true"
            fi

            gatewayNew=$(redis-cli -s /tmp/.redis.sock HGET wan_dhcp gateway)
            if [ "x$gatewayNew" != "x" ];then
                if [ "$find_conflict" = "false" ];then
                    update_static_route.sh $(uci get network.wan_dev.name) $gatewayNew ${subnet:-255.255.255.0}
                else
                    update_static_route.sh $(uci get network.wan_dev.name) $gatewayNew ${subnet:-255.255.255.0} no_reload
                fi
            fi

            if [ $find_conflict = "true" ];then
                if [ "x" != "x$(echo $cur_lan_ip | grep "192\.168\.1\.")" ];then
                    uci set network.lan.ipaddr=10.0.0.1
                elif [ "x" != "x$(echo $cur_lan_ip | grep "10\.0\.0\.")" ];then
                    uci set network.lan.ipaddr=172.16.0.1
                else
                    uci set network.lan.ipaddr=192.168.1.1
                fi
                uci set network.lan.netmask=255.255.255.0
                update_static_route.sh br-lan $(uci get network.lan.ipaddr) 255.255.255.0 no_reload
                uci commit network
                redis-cli -s /tmp/.redis.sock set wanLanIpConflict 1
                /etc/init.d/network restart &
            fi

            #For L2TP or PPTP static route
            def_route=$(uci get network.wan.defaultroute)
            if [ $def_route -eq 0 ];then
                wan_ifname=$(uci get network.wan_dev.name)
                server_ip=$(uci get network.vpn.server)

                if [[ ! -z $server_ip ]];then
                    host="${server_ip%:*}"
                    for ip in $(resolveip -t 5 "$host"); do
                        for k in $router; do
                            ip route add $ip via $k dev $wan_ifname proto static 
                            for k1 in $dns; do
                                ip route add $k1 via $k dev $wan_ifname proto static 
                            done
                        done
                    done
                fi
            fi
        fi

        if [ "$net_mode" = "ap" ];then
            #record switch port for uplink port
            rm -rf /tmp/apmodeUpLinkPort
            for k in $router; do
                gatewaymac=$(arp -n | grep "($k)" | awk  -F ' ' '{print $4}')
                if [ ${#gatewaymac} -ne 17 ]; then
                    gatewaymac=$(arping -I br-lan -f -w 2 $k | grep Unicast | cut -d '[' -f 2 | cut -d ']' -f 1)
                fi
                [ ${#gatewaymac} -ne 17 ] && continue
                #switchport=$(tw_vty -c "mac find vid 4095 $gatewaymac" 2> /dev/null | cut -d '=' -f 2 | xargs echo -n)
                switchport="eth1"
                if [ "$switchport" = "0" ]; then
                    echo "Port=$switchport" > /tmp/apmodeUpLinkPort
                else
                    #switchport=$(tw_vty -c "mac find vid 0 $gatewaymac" 2> /dev/null | cut -d '=' -f 2 | xargs echo -n)
                    if [ "$switchport" != "-1" ] || [ "$switchport" != "6" ]; then
                        echo "Port=$switchport" > /tmp/apmodeUpLinkPort
                    fi
                fi
            done
            #Update ebtables rule for wifi_isolation
            /sbin/init_isolation.sh &
            #ap mode Update ebtables rule for accesscontrol
            ubus send access_control_refresh_rule
        fi
        if [ ! -f /tmp/ntp_sync_ok ]; then
            /etc/init.d/sysntpd restart
        fi
    ;;
esac
