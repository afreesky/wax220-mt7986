--- a/log/logread.c
+++ b/log/logread.c
@@ -68,6 +68,8 @@
 static int logd_conn_tries = LOGD_CONNECT_RETRY;
 static int facility_include;
 static int facility_exclude;
+static int priority_include;
+static int priority_exclude;
 
 /* check for facility filter; return 0 if message shall be dropped */
 static int check_facility_filter(int f)
@@ -79,6 +81,15 @@
 	return 1;
 }
 
+static int check_priority_filter(int p)
+{
+	if (priority_include)
+		return !!(priority_include & (1 << p));
+	if (priority_exclude)
+		return !(priority_exclude & (1 << p));
+	return 1;
+}
+
 static const char* getcodetext(int value, CODE *codetable) {
 	CODE *i;
 
@@ -150,6 +161,9 @@
 	if (!check_facility_filter(LOG_FAC(p)))
 			return 0;
 
+	if (!check_priority_filter(LOG_PRI(p)))
+			return 0;
+
 	m = blobmsg_get_string(tb[LOG_MSG]);
 	if (regexp_pattern &&
 	    regexec(&regexp_preg, m, 0, NULL, 0) == REG_NOMATCH)
@@ -229,6 +243,8 @@
 		"    -P	<prefix>	Prefix custom text to streamed messages\n"
 		"    -z	<facility>	handle only messages with given facility (0-23), repeatable\n"
 		"    -Z	<facility>	ignore messages with given facility (0-23), repeatable\n"
+		"    -v	<priority>	handle only messages with given priority (0-7), repeatable, 0:emerg/1:alert/2:crit/3:err/4:warning/5:notice/6:info/7:debug\n"
+		"    -V	<priority>	ignore messages with given priority (0-7), repeatable\n"
 		"    -f			Follow log messages\n"
 		"    -u			Use UDP as the protocol\n"
 		"    -t			Add an extra timestamp\n"
@@ -301,13 +317,14 @@
 {
 	struct ubus_context *ctx;
 	uint32_t id;
+	uint32_t pri;
 	const char *ubus_socket = NULL;
 	int ch, ret, lines = 0;
 	static struct blob_buf b;
 
 	signal(SIGPIPE, SIG_IGN);
 
-	while ((ch = getopt(argc, argv, "u0fcs:l:z:Z:r:F:p:S:P:h:e:t")) != -1) {
+	while ((ch = getopt(argc, argv, "u0fcs:l:z:Z:v:V:r:F:p:S:P:h:e:t")) != -1) {
 		switch (ch) {
 		case 'u':
 			log_udp = 1;
@@ -345,6 +362,14 @@
 			id = strtoul(optarg, NULL, 0) & 0x1f;
 			facility_exclude |= (1 << id);
 			break;
+		case 'v':
+			pri = strtoul(optarg, NULL, 0) & 0x7;
+			priority_include |= (1 << pri);
+			break;
+		case 'V':
+			pri = strtoul(optarg, NULL, 0) & 0x7;
+			priority_exclude |= (1 << pri);
+			break;
 		case 'S':
 			log_size = atoi(optarg);
 			if (log_size < 1)
